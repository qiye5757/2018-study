1.function name($a){
  abc
}
2.global 只能在函数中使用，在函数内部使用外部的变量 
static
3.形参也属于局部变量
[]    有默认参数的
.....  可以声明多个的

伪类型
mixed  一个参数可以接受多种不同的类型
number 一个参数可以是int和float
callback 回调类型
void    空类型

4.可变变量的函数
如果将一个函数名称给一个变量(字符串)，然后在这个变量的后面加上括号，就会调用这个变量值对应函数

注意：不能用于一些语言结构，如include require echo 

5.回调函数
在使用一个函数的时候，如果传一个变量，不能解决多大的问题，那就需要将一个过程进入到函数中，改变函数的执行行为。

在函数的调用时，在参数中传的不是一个变量或者一个值，这就是函数回调参数    调用的是函数的名称

print_r  输出数组

usort   

strlen 计算字符串长度

6.制作回调函数的方法
第一种：回调函数和可变函数在一起用
第二种：借助call_user_func_array("fun",)借助于系统函数，而非可变函数
call_user_func_array()  调用回调函数，并把一个数组参数作为回调函数的参数


回调函数调用的可能是全局函数，对象中的方法，类中的静态函数

7.跟文件有关的系统函数
    opendir
    is_dir
    closedir
    fordir
8.递归函数
 在函数中调用自己就是递归函数


9.加载自定义的函数
    使用include
    可以使用其他的文件
    避免重新定义   include_once
     include_once 效率高


    require也可以包含其他文件
    require_once

    区别：固定包含用require，判断用include

   这俩都是系统指定的函数所以有两种指定方式

    指令的两种指定方式
    include("abc");
    include "abc";
    这两种结果相同
        
10.5.3以后新增匿名函数和闭包
    匿名函数也叫闭包函数，允许临时创建一个没有指定名称的函数，经常作为回调函数参数的值。当然，也有其他应用的情况。

    实例：
    在函数调用时：
    eg：<?php
       echo prep_replace_callback('slsll',function($match){
           return strtoupper($match[1]);
       },'hello-world');
       ?>

     作为变量的值。php自动会把此种表达式转换成内置类Closure的对象实例。把一个closure对象赋给一个变量的方式与普通变量赋值的语法是一样的，最后也要加上分号：
     eg：
     <?php
        $greet = function($name){
	  printf("hello%s\r\n",$name);            即为可变变量的函数
	  };
	  $greet("world");
	  $greet('PHP');

	
11.php闭包实现主要就是靠匿名函数
  将匿名函数在普通函数中当做参数传入，也可以被返回，这就实现了简单的闭包。
  通俗的将：子函数可以使用付函数的局部变量，这种行为就叫做闭包
  实现闭包的方法；
  1.把匿名函数当做参数传递，并且调用它
    eg:
      function callFunc($func){
          $func("some string\r\n");
      }
      $printStrFunc = function($str){
         echo $str;                 //匿名函数的定义方法
      }


      callFunc($printStrFunc);

  2.直接将匿名函数进行传递
      callFunc( function( $str ){
           echo $str;
      });
3. 连接闭包和外界变量的关键字：use。即在函数内部声明一个匿名函数，该匿名函数可以引用函数内部变量
    function a(){
   $rmb = 1;
   $func = function() use (&$rmb){
        echo $rmb."<br>";
      };
       $func();
     }
        a();

注意use的参数可以加&,也可以不加,加的话,改变里面外边也改变，如果不加，改变里面外面不变

不能用golbal关键字，因为function a 这个函数中的变量是局部变量，而golbal关键字是将全局变量能在函数内部，即函数作用域中使用。
4.在匿名函数中改变上下文的变量
   function a(){
     $rmb = 1;
     $func = function() use ($rmb){
        echo $rmb."<br>";
	$rmb++;
	echo $rmb;
     };
     $func();
     echo $rmb;
   }
  a();
5.将匿名函数当做一个返回值
  function demo(){
     $a = 10;
     $b = 20;
     $one = function($str) use (&$a,&$b){
          echo $str."<br>";
	   echo $b."<br>;"
	   $a++;
	   echo $a."<br>";
	  };
	  return $one;
  }
   $var = demo();
   $var("hello world");
   $var("this is a test");
   $var("#############");
这样写有什么用呢？
在JS或者PHP中，如果有一些变量不想释放，可以将这些变量作为全局变量使用，但是使用全局变量有一些弊端：可能重名，可能值会被改变。用闭包保护这些变量，但是对PHP作用不太大。
 闭包的两个特点：
 1.作为一个函数变量的一个引用，当函数返回时，其处于激活状态
 2.一个闭包就是当一个函数返回时，一个没有释放资源的栈区
匿名函数不能加返回值，有返回值了，这个闭包就可能会被终止了


总结一下：
    闭包外部是个函数
    闭包内部是个函数
    闭包会return内部函数
    闭包返回的函数内部不能有return
    执行闭包后，闭包内部函数会存在，而闭包内部函数的内部变量不会存在
  闭包的应用场景
1.保护函数内的变量安全。以最开始的例子为例，外层函数中变量只有内部函数才能访问，而无法通过其他途径访问到，因此保护了外层函数中变量的安全性。
2.在内存中维持一个变量。依然如潜力，由于闭包，外层函数中的变量一直存在与内存中，因此每次执行，都会使用到。

 PHP闭包的特性并没有太大惊喜，其实用 CLASS就可以实现类似甚至强大得多的功能，更不能和js的闭包相提并论，只能期待PHP以后对闭包支持的改进。不过匿名函数还是挺有用的，比如在使用 array_filter()等之类的函数可以不用在外部声明回调函数了。

目前还不稳定，不适用于正式开发。




10.函数的返回值：
   1.return：return是一个语言结构，不是一个函数，所以没必要用()
   2.返回一个数组：函数不能返回多个值，可以通过返回一个数组来达到同样的效果
   3.返回一个引用：仅用一种语法
    eg:    function &aaaa{
                 return $aomeweu;
         }

	 $bbbb = &aaaa();


总结：1.函数的参数可以通过引用传递，或者默认参数
      2.return  可以传递一个  多个(数组)  引用(只有一种格式，即在函数名前面加引用，在变量引用的使用)
匿名函数可以直接在函数调用时使用。  可以是可变函数，可是直接在函数调用时候使用，不用定义函数名、
函数也可以作为一个变量的值使用，也就相当于可变函数，只不过这个函数是直接定义在变量的后面。
连接闭包和函数:use      匿名函数通过use可以使用母函数内的变量而不用使用golbal    如果加上&引用符号，母函数和子函数变量的值都会改变

常用的函数:
array_walk()  两个参数 第一个参数是数组对象，第二个参数是回调函数  作用是将数组中的每个元素用于回调函数的参数
constant()  返回一个常量的值        .用来连接字符串
round()  对浮点数进行四舍五入


















