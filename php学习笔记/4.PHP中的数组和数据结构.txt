1.数组是php语言中一种非常重要的数据类型。将多个元素组合在一起的组合
   数组分为两种:索引数组和关联数组
2.php声明
    1.直接赋值的方式来声明数组
        1.一个数组中存的是多个内容，数组中的内容叫做"元素";
	2.每个元素都是由键和值组成的 key/value  key 下标
	   $a = array("one"=>"1111111111","two"=>"222222222");
	通过key使用值
	$arr[下标] = 1;
	3.下标有两种类型:一种是整型(索引数组)，一种是字符串(关联数组).
	打印数组的函数:print_r();
	4.[]来操作下标，也可以用使用{}进行互换。尽量别用{}；
        原因：  eg：
	  echo "11111111$arr[three]1111";可以使用
	  echo "111111111$arr{three}11111111111111";不可以
	 如果声明的时候  $arr[four] 是可以的，这是把他定义成为常量，常量在不声明的情况下会自动转为字符串;效率很低慢8倍; 
         5.key的强制转换：
	 包含合法整型值的字符串-->整型   08不会，因为其不是一个合法的十进制数值
	 浮点数-->整型   
	 NULL-->空字符串
	 bool-->整型   真值=1   假值=0;
	 6.同一个键名，最后一个会覆盖前面所有的;
	 7.如果给定的值没有键名，取当前最大的整数索引值，而新的键名将是该值加1;关联字符串的字符串下标不会影响;
    2.使用array()语言结构新建数组
         跟include require echo相同，两种方式
	 使用=>符号指定下标
	 $arr = array 
    3.PHP4的新型声明方式
         php5.4以后，可以向其他语言一样声明数组了
	 $arr = ["aaaa","bbbb",1,2,3,3,55555555,55,5,5,5,5];

	 函数如果返回数组，可以直接在函数后面加[]来引用数组，之前只能通过访问一个临时变量
3.数组元素的清除
     unset   索引没了
     null    索引还在
     array_values让下标重新索引     
4.二维数组的声明与应用
   数组的数组
     $group = array(
                array("neme"=>1),
		array("a"=>1)
     )
5.多维数组
6.数组的遍历
   1.使用for语句循环遍历数组:保证数组一定是下标连续的索引数组
            效率很高，就是数组访问方式，只不过通过循环去取值
	    count   获取数组长度
	    不足之处:数组下标不一定是连续的
	         关联数组根本遍历不了
   2.使用foreach语句循环遍历数组
       1.foreach(数组  as  自定义变量){
       
        }
	数组有多少元素，foreach就循环多少次
	每次循环将数组中的元素赋给自定义的变量
       2.foreach(数组  as  下标变量 => 值变量){
       
        }
	遍历二维数组，可以用，但有一个问题：如果二维数组中的值不是数组，而是数组和单个值混合，就不能双重foreach，会出错。
   3.联合使用list(),each()和while循环遍历数组
        遍历数据库表的时候实用得多，实际应用list()  while
	list()是一个函数，但这个函数和其它函数用法不同，
	作用：将数组中的元素转为变量使用.
	1.$var = function()
	  list() = 
	2.等号左边使用list函数，等号右边只能是一个数组
	3.数组中有几个元素，在list()中就有几个参数，而且参数必须是变量(新声明的自定义变量),不能是值
	4.只能将索引数组转为变量，是按下标0开始找的
	5.可以在list参数中通过空项选择性的接受数组中的元素
	6.应用的场合很多

	each()函数:返回数组当前的键值，并将数组指针向后移一位                  
	1.each()只是一个函数，参数就是一个数组作为参数，返回的值也是一个数组。
	2.返回的值是一个数组，数组有固定四个元素，而且下标也是固定的  1  值
	value  值 
	0   下标
	key   下标 
	3.each只处理当前的元素将当前的元素(默认当前元素是第一个元素)转为数组信息，处理完后，指针向下一个元素移动。
	4.如果指针已经到了结束位置，就会返回假



	配合遍历while(list($a,$b) = each($arr)){
	     echo "{$a}----->{$b}<br>";
	}
	 有一个问题:指针指向这个数组的最后，只能引用一次，如何解决
	 reset($arr);
   4.使用数组的内部指针控制函数遍历数组
        数组指针的控制函数 
	  next()向后移动
	  prev()向前移动
	  end()将指针指向数组中的最后一个元素
	  reset()将指针无条件移至第一个索引位置
          使用key和current函数传入数组，返回数组中当前元素的键和值
          key  获取当前下标
	  current  获取当前值
7.预定义变量(超全局数组)
     超全局变量，在php脚本中，已经声明完的变量，你直接去使用即可
     9个
    $_SERVER   server    服务器变量
    $_ENU      enu       环境变量
    $_GET      get       HTTP　GET变量
    $_POST     post      HTTP  POST变量
    $_REQUEST  request   request变量
    $_FILES    files     http  文件上传变量
    $_COOKIE   cookie    HTTP  Cookies
    $_SESSION  session   Session变量
    $_GLOBALS  globals   Global变量
    1.这些都是数组(关联数组)，就和你自己声明的数组是一样的操作方式
    2.全局  自己定义的数组想要在函数中使用，得需要golbal
      而这几个函数，随便可以在全局使用
    3.超  每一个预定义的数组都有自己独特的能力
8.服务 $SERVER
    获取ip的方式
       function getip(){
           if(!empty($_SERVER['HTTP_CLIENT_IP'])){
	       return $_SERVER['HTTP_CLIENT_IP'];
	   }else if(!empty($_SERVER['HTTP_X_FORWARDED_FOR'])){
	       return $_SERVER['HTTP_X_FORWARDED_FOR'];
	   }else if(!empty($_SERVER['REMOTE_ADDR'])){
	       return $_SERVER['REMOTE_ADDR'];
	   }else{
	       return '未知';
	   }
       }
$_SERVER是一个包含诸如头信息，路径和脚本位置的数组。数组的实体由web服务器创建。不能保证所有的服务器都能产生所有的信息:服务器可能忽略了一些信息，或者产生了一些未在下面列出的新的信息。这是一个自动全局变量。这只不过以为着它在所有的脚本中都有效。在函数或者方法中不需要使用golbal $_SERVER:
  -PHP_SELF:当前正在执行的脚本的文件名
  -DOCUMENT_ROOT:当前运行脚本所在的文档根目录
  -REMONT_ADDR:正在浏览当前页面用户的IP地址
9.环境变量$_ENV
  在解析器运行时，这些变量从环境变量转变为PHP全局变量名称空间。他们中的许多都是由PHP所运行的系统决定的。完整的列表是不可能的。请查看系统的文档以确定其特定的环境变量。

  这是一个自动全局变量。它在所有的脚本中都有效，在函数或者方法中不需要golbal $_ENV.
10.$_GET  接受用户通过url向服务器传递的参数
   $_POST  接收用户通过http协议向服务器传的参数
   $_REQUEST
   url只能是get提交
   表单两种都可以
   $arr = !empty($_POST)? $_GET : $_POST;
   全局变量不能作为函数的形参
11.$_FILES  文件上传
   $_COOKIE  传递变量组成的数组
   $_SESSION  跟$_COOKIE有点像
   $GOLBALS   其他的所有的都有了  不让其开启
   php5.2
   php5.4    

12.数组的作用，声明，遍历，超全局数组
   数组的相关处理函数
   1.数组的键/值操作函数
      1. array_values 返回数组中所有的值
      2. array_key 返回数组中的所有键名
      3.in_array  检查数组中是否存在某个值
      4.array_search  在数组中搜索指定的值，如果成功则返回相应的键名。
      5.array_key_exists  检查给定的键名或者索引是否存在数组中
      6.isset  同上  有一个缺点，当数组中为null的值会返回false
      7.array_flip  交换数组中的键和值   
         有两个相同的值，后边的会把前面的覆盖
	 只能是字符串和整数，其他的都不行
      8.array_reverses  返回一个单元顺序相反的数组
   2.统计数组元素的个数与唯一型3,4
        count  计算数组中的单元数目个数或者对象中的属性个数
	若果输出的是一个字符串，结果为1，是一个整型
	array_count_values 统计数组中所有的值出现的次数
	array_unique  移出数组中重复的值
	  留下第一次出现的
   3.使用回调函数处理数组的函数
        array_filter  用回调函数过滤数组中的单元
	 用匿名函数
	array_walk  对数组的每个成员应用用户函数
	最多只能传送三个参数
	如果回调函数中没有第三个参数，但是array_walk有第三个参数，会警告
	array_map   将回调函数作用到给定数组的单元上
	array――map有几个数组 ，自定义函数就有几个参数
	数组的长度最好相同，不相同会将给短的加上空的单元
	若自定义函数为NULL，array_map会构建一个数组的数组
   4.数组的排序函数
        冒泡法  
	快速排序法 
	sort
	rsort   适合于索引数组
        适合于关联数组ksort  按数组的键名进行排序 升序
	krsort   降序
	asort   对数组进行排序并保持索引关系  下标不变
	arsort   降序  

        natsort  用“自然排序”算法进行排序
	natcasesort   不区分大小写的“自然数排序”
	usort   是用户自定义的比较函数对数组中的值进行排序
	uasort
	uksort   由匿名函数的返回值为1,0，-1来决定
	array_multisort  对多个数组或者多维数组进行排序
   5.拆分，合并，分解与结合的函数
        array_slice  从数组中取出一段
	array_splice  把数组中的一部分去掉并用其他值来取代
	array_combine  创建一个数组，用一个数组的值作为键名，用另一个数组的值作为其值，个数必须对应

        + 两个数组相加  下标相同覆盖，前面的覆盖后面的
	array_merge    索引数组两个数据相加，重新给下标赋值
	关联数组会覆盖
	array_intersect  将交集提取出来
	array_diff    将差集提取出来
   6.数组与数据结构
        栈和队列  栈后进先出  队列 队首进入先进先出
	array_push     在数组的最后插入数组
	array_pop
        array_unshift  在数组的开头插入数组
	array_pop      将数组的最后一个输出
	array_shift   将数组开头的元素移出数组
   7.其他有用的数组处理函数
        arrar_rand   从随机数组中随机取出一个或者多个单元
	shuffle      打乱一个函数
	Array_sum    统计数组中所有值的和
	Range        建立一个包含指定范围单元的数组
        array_fill   用给定的值填充数组
