1.  1.正则表达式就是一个匹配的模式
    2.正则表达式本身就是一个字符串(有一些语法规则，特殊字符)。
    分割匹配查找替换
    3.正则表达式这个字符串，一定要在对应的函数中使用(分割的函数，替换的函数)
    4.PCRE  perl-Compatibal   Regular Expressions   preg_
        perl 语言支持正则表达式特别好，功能好，支持好
      POSIX ereg_
2.正则表达式语法介绍
    1.定界符  原子   元字符  模式修正符
    2.定界符 //基本上都用这个 多种都可以
        1.原子:就是你要找的字符，最小的一个匹配单位(放在定界符中)，在一个正则表达式中，至少要有一个原子
        2.元字符:元字符不能单独使用,修饰原子，是用来扩展原子功能和限定功能的(写在定界符号中)
	3.模式修正符号:修正，对模式(正则)进行修正用的(写在定界符外面，写在右边)。
3.在程序语言中，使用与Perl兼容的正则表达式，通常都需要将模式表达式放入定界符之间，如"/".定界符除了字母，数字，斜线\以外的任何字符都可以作为定界符
4.正则表达式中的原子
    1.原子是由所有那些未显示指定为原字符的打印和非打印字符组成，所有的符号都是原子。
       1.打印字符  a-z A-Z 0-9 _   !@ #$%^&*()_+
       2.非打印字符
        \n   匹配一个换行符   \x0a   \cJ  
        \cx  匹配由x指明的控制字符    x的值为A-Z 或者a-z之一
	\f   匹配一个换页符  \x0c  \cL
	\r   匹配一个回车符  \x0d  \cM
	\t   匹配一个制表符  \x09  \cI
	\v   匹配一个垂直制表符  \x0b   \cK
       3.打印字符中一些有意义的字符  需要转义一下
       4.转义字符可以将没有意义的字符转成有意义的原子
       5.a-z  A-Z 0-9  所有没有意义的字符，加上转义也没有意义的，都是可
       加可不加的


       6. 匹配一系列的 
       \d代表任意一个数字 \D代表任意一个非数字 
       \s代表空白 \S代表任意一个非空白 
       \w代表任意一个字(a-z A-Z 0-9 _) \W  代表任意一个非字
         所有的数字
         所有的字
	 所有的空白
	 所有的字母
	 所有的特殊符号
       自定义原子表[]     只有一个生效 
       -  范围
       ^  除了
       7.点.能代表所有的
5.元字符:这个不能在正则表达式中单独使用，对原子进行修饰的
  1.出现重复次数的
    1.*  用来修饰其前面的原子可以出现  0个 1个或者多个
    2.+  用来修饰其前面的原子可以出现  1个或者多个
    3.？ 用来修饰其前面的原子可以出现  0个或者1个
    4.{} 限制次数 用来修饰其前面的原子只能出现n次，多一次和少一次都不行
    5.{n,m}  出现n到m之间的次数  包括n和m
    6.{2,}   出现至少两次
    7.{,5}   不可以这样写，可以以0开始



    8.|   或的关系，表示它两边的原子只要有一个出现就行，但是|的优先级是最低的   
    9.^和\A    必须以什么开始，这个必须写在正则表达式的最前面
      $或\Z    必须以什么结束，这个必须写在正则表达式的最后面
    10.\b    匹配单词边界的
       \B    匹配不是单词边界的
    . [] 也可以算是元字符   
    
6.()的作用
    1.改变优先级
    2.将小原子变成大原子 
    3.子模式，整个表达式是一个大的模式，小括号中是每个独立的子模式
    4.反向引用    \1或者 引用第一个括号  如果不想被引用(?:)


7.模式修正符号(单个字符)
   1.模式修正符号要写在定界符号外，放在右边
   2.模式修正符号，一个字符就是一个功能，可以组合使用
   3.作用:模式修正符号可以修正正则表达式的解释，或扩充了正则表达式的功能。
   4.i  不区分大小写(默认是区分大小写的)
     m  默认是看做一行的，加上m就视为多行
     s  使用了这个.可以匹配换行符
     x  修正正则表达式，可以省略空白 
     e  修正正则表达式 preg_replace
     U  (.*,.+)正则表达式比较贪婪 .*？ .+？取消贪婪模式  U也能但是不兼容   这两种方式同时使用就不会奏效了

8.常见的正则表达式
   1.正则表达式本身也是一种语言，开发思想放进去
   2.先列需求，一条一条的满足
   3.常见的网上都有  不常见的自己写

9.字符串处理函数(处理快，但有一些做不到)

  正则表达式函数(功能强大，效率更低)

  注意:如果可以直接使用字符串处理函数最好别使用正则处理

10.匹配查找
       strstr  strpos  substr

   正则匹配和查找
       preg_match
       preg_march_all 
          第四个参数有三种格式，三种数组的格式
	  PREG_PATTERN_ORDER
	  PREG_SET_ORDER
	  PREG_OFFSET_CAPTURE
       preg_grep
       匹配查找数组中的
    
11.字符串的分割与连接
     分割函数

     explode 如果第一个参数是空字符串""explode()将会返回假值
     如果第二个参数字符串中没有，将会返回一个数组

     preg_split
     第一个参数为空字符串不会返回假值
     四个参数  前三个和explode一样，第三个参数为-1，才能写第四个参数  
     PREG_SPLIT_NO_EMPTY   preg_split()只会返回非空的部分
     PREG_SPLIT_DELIM_CAPTURE   定界符模式中的括号表达式也会被捕获并返回
     PREG_SPLIT_OFFSET_CAPTURE   返回偏移量

     连接函数
     .
     implode
     第一个参数是用什么连接，第二个参数是要连接的数组
     list函数
12.替换
    字符串处理函数   str_replace()
    1.四个参数   前两个参数分别为要被替换的和要替换的  第三个参是在哪个字符串中或者数组中   第四个参数  是一个整型的引用，即一个整型的变量 
    2.第一个参数为数组，第二个参数是字符串
    3.第一个参数和第二个参数都为数组，数组个数相同


    正则表达式     preg_replace()
    1.四个参数    最后一个参数是替换几次
    2.反引用
    第二个参数可以像在正则表达式中一样  取出第一个正则表达式中的子模式，用\1\2或者$1$2
    3.模式修正符e   在替换的时候可以执行这个字符串里面的函数
      即给第二个参数里面可以写一些函数，参数是用来处理 反引用第一个参数的子模式，那么这些函数就会正常执行，如果没有e这个函数名会当做字符串来执行
    4.顺序有关
    5.如果第三个参数是数组，函数返回值是数组
13.其他的正则表达式函数
   preg_replace_callback
   preg_filter
   preg_last_error
   preg_quote   转义
